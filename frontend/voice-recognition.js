/**
 * üé§ MODULE DE RECONNAISSANCE VOCALE
 * ================================
 * 
 * G√®re le comptage vocal des r√©p√©titions pendant l'exercice.
 * Supporte le comptage naturel ("1, 2, 3...") et par mot-cl√© ("top").
 * 
 * @version 1.0.0
 * @author Assistant
 */

// ===== VARIABLES GLOBALES =====

/**
 * Instance de reconnaissance vocale du navigateur
 * @type {SpeechRecognition|null}
 */
let recognition = null;

/**
 * √âtat de la reconnaissance vocale
 * @type {boolean}
 */
let voiceRecognitionActive = false;

/**
 * Donn√©es de comptage vocal de la session courante
 * @type {Object}
 */
let voiceData = {
    count: 0,
    timestamps: [],
    gaps: [],
    lastNumber: 0,
    startTime: null,
    confidence: 1.0
};


// OPTIMISATIONS PERFORMANCE
const FRENCH_NUMBERS = new Map([
    ['un', 1], ['1', 1],
    ['deux', 2], ['2', 2], 
    ['trois', 3], ['3', 3],
    ['quatre', 4], ['4', 4],
    ['cinq', 5], ['5', 5],
    ['six', 6], ['6', 6],
    ['sept', 7], ['7', 7],
    ['huit', 8], ['8', 8],
    ['neuf', 9], ['9', 9],
    ['dix', 10], ['10', 10],
    ['onze', 11], ['11', 11],
    ['douze', 12], ['12', 12],
    ['treize', 13], ['13', 13],
    ['quatorze', 14], ['14', 14],
    ['quinze', 15], ['15', 15],
    ['seize', 16], ['16', 16],
    ['dix-sept', 17], ['17', 17],
    ['dix-huit', 18], ['18', 18],
    ['dix-neuf', 19], ['19', 19],
    ['vingt', 20], ['20', 20]
]);

const QUICK_PATTERNS = new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']);
const recognitionCache = new Map();

// SYST√àME DE PR√âDICTION
let predictedNext = 1;
let displayedCount = 0;
let pendingValidation = null;

// ===== FONCTIONS PRINCIPALES =====

/**
 * Initialise le module de reconnaissance vocale
 * V√©rifie la compatibilit√© du navigateur et configure l'instance
 * 
 * @returns {boolean} true si l'initialisation r√©ussit, false sinon
 */
function initVoiceRecognition() {
    // V√©rifier le support de la reconnaissance vocale
    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        console.warn('[Voice] Speech Recognition non support√©e par ce navigateur');
        return false;
    }
    
    try {
        // Cr√©er l'instance de reconnaissance vocale
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        
        // Configuration de base
        recognition.lang = 'fr-FR';
        recognition.continuous = true;
        recognition.interimResults = true;
        recognition.maxAlternatives = 3;
        
        // Attacher les gestionnaires d'√©v√©nements
        recognition.onresult = handleVoiceResult;
        recognition.onerror = handleVoiceError;
        recognition.onend = handleVoiceEnd;
        recognition.onstart = () => {
            console.log('[Voice] Reconnaissance d√©marr√©e');
        };
        
        console.log('[Voice] Module initialis√© avec succ√®s');
        console.log('[Voice] Langue configur√©e:', recognition.lang);
        console.log('[Voice] Mode continu:', recognition.continuous);
        
        return true;
        
    } catch (error) {
        console.error('[Voice] Erreur lors de l\'initialisation:', error);
        return false;
    }
}

/**
 * D√©marre la reconnaissance vocale pour une nouvelle s√©rie
 * Remet √† z√©ro les donn√©es et active l'√©coute
 * 
 * @returns {void}
 */
function startVoiceRecognition() {
    if (!recognition || voiceRecognitionActive) {
        console.log('[Voice] Reconnaissance non disponible ou d√©j√† active');
        return;
    }
    
    // R√©initialiser les donn√©es de comptage
    voiceData = {
        count: 0,
        timestamps: [],
        gaps: [],
        lastNumber: 0,
        startTime: Date.now(),
        confidence: 1.0
    };
    
    try {
        // ===== NOUVEAU : GESTION DES PERMISSIONS =====
        recognition.start();
        voiceRecognitionActive = true;
        
        // D√©marrer le timeout d'auto-validation (Phase 6.3)
        startAutoValidationTimer();
        
        // Mettre √† jour l'interface - ic√¥ne micro active
        const microIcon = document.querySelector('.voice-toggle-container i');
        if (microIcon) {
            microIcon.classList.add('active');
        }
        
        console.log('[Voice] Reconnaissance d√©marr√©e avec succ√®s');
        
    } catch (error) {
        console.error('[Voice] Erreur au d√©marrage:', error);
        voiceRecognitionActive = false;
        
        // Gestion des erreurs de permissions
        handleVoiceStartupError(error);
    }
}

/**
 * G√®re les erreurs de d√©marrage de la reconnaissance vocale
 */
function handleVoiceStartupError(error) {
    console.error('[Voice] D√©tail erreur d√©marrage:', error);
    
    // D√©sactiver le comptage vocal pour cette session
    voiceRecognitionActive = false;
    
    // Messages explicites selon l'erreur
    if (error.name === 'NotAllowedError' || error.message.includes('permission')) {
        showToast('Permission microphone refus√©e. Activez-la dans les param√®tres du navigateur.', 'error');
        
        // Guide utilisateur
        setTimeout(() => {
            showToast('Chrome: cliquez sur üîí dans la barre d\'adresse ‚Üí Autoriser le microphone', 'info');
        }, 3000);
        
    } else if (error.name === 'NotFoundError') {
        showToast('Aucun microphone d√©tect√© sur cet appareil', 'error');
        
    } else if (error.name === 'NotSupportedError') {
        showToast('Reconnaissance vocale non support√©e par ce navigateur', 'error');
        
    } else {
        showToast('Erreur microphone. Utilisez le comptage manuel.', 'warning');
    }
    
    // Nettoyer l'interface
    const microIcon = document.querySelector('.voice-toggle-container i');
    if (microIcon) {
        microIcon.classList.remove('active');
    }
}


let autoValidationTimer = null;
let lastVoiceActivityTime = null;

/**
 * D√©marre le timer d'auto-validation (30s apr√®s derni√®re activit√© vocale)
 */
function startAutoValidationTimer() {
    // Nettoyer le timer existant
    if (autoValidationTimer) {
        clearTimeout(autoValidationTimer);
    }
    
    lastVoiceActivityTime = Date.now();
    
    // Timer de 30 secondes
    autoValidationTimer = setTimeout(() => {
        handleAutoValidation();
    }, 30000);
    
    console.log('[Voice] Timer auto-validation d√©marr√© (30s)');
}

/**
 * Remet √† z√©ro le timer √† chaque activit√© vocale
 */
function resetAutoValidationTimer() {
    if (!voiceRecognitionActive) return;
    
    lastVoiceActivityTime = Date.now();
    
    // Red√©marrer le timer
    if (autoValidationTimer) {
        clearTimeout(autoValidationTimer);
    }
    
    autoValidationTimer = setTimeout(() => {
        handleAutoValidation();
    }, 30000);
    
    console.log('[Voice] Timer auto-validation remis √† z√©ro');
}

/**
 * G√®re l'auto-validation apr√®s timeout
 */
function handleAutoValidation() {
    if (!voiceRecognitionActive) return;
    
    console.log('[Voice] Timeout atteint - auto-validation');
    
    // Afficher notification discr√®te
    showToast('S√©rie valid√©e automatiquement (30s sans activit√© vocale)', 'info');
    
    // Valider avec le compte actuel
    if (voiceData.count > 0) {
        console.log(`[Voice] Auto-validation avec ${voiceData.count} r√©p√©titions`);
        
        // D√©clencher executeSet() si disponible
        if (typeof executeSet === 'function') {
            executeSet();
        } else {
            console.warn('[Voice] Fonction executeSet non disponible pour auto-validation');
        }
    } else {
        console.log('[Voice] Auto-validation sans comptage - arr√™t reconnaissance');
        stopVoiceRecognition();
    }
}

/**
 * Nettoie le timer d'auto-validation
 */
function clearAutoValidationTimer() {
    if (autoValidationTimer) {
        clearTimeout(autoValidationTimer);
        autoValidationTimer = null;
        console.log('[Voice] Timer auto-validation supprim√©');
    }
}

/**
 * D√©marre la reconnaissance avec syst√®me de pr√©diction initialis√©
 */
function startVoiceRecognition() {
    if (!recognition || voiceRecognitionActive) {
        console.log('[Voice] Reconnaissance non disponible ou d√©j√† active');
        return;
    }
    
    // R√âINITIALISATION COMPL√àTE
    voiceData = {
        count: 0,
        timestamps: [],
        gaps: [],
        lastNumber: 0,
        startTime: Date.now(),
        confidence: 1.0
    };
    
    // R√âINITIALISATION PR√âDICTION
    predictedNext = 1;
    displayedCount = 0;
    pendingValidation = null;
    recognitionCache.clear(); // Nettoyer le cache pour cette s√©rie
    
    try {
        recognition.start();
        voiceRecognitionActive = true;
        
        // Timer auto-validation (si impl√©ment√©)
        if (typeof startAutoValidationTimer === 'function') {
            startAutoValidationTimer();
        }
        
        // UI feedback
        const microIcon = document.querySelector('.voice-toggle-container i');
        if (microIcon) {
            microIcon.classList.add('active');
        }
        
        console.log('[Voice] Reconnaissance d√©marr√©e avec pr√©diction initialis√©e');
        
    } catch (error) {
        console.error('[Voice] Erreur au d√©marrage:', error);
        voiceRecognitionActive = false;
        
        // Gestion d'erreurs (si impl√©ment√©e)
        if (typeof handleVoiceStartupError === 'function') {
            handleVoiceStartupError(error);
        }
    }
}

/**
 * Gestionnaire principal des r√©sultats de reconnaissance
 * Parse les transcripts et identifie les nombres/commandes
 * 
 * @param {SpeechRecognitionEvent} event - √âv√©nement de reconnaissance
 * @returns {void}
 */
function handleVoiceResult(event) {
    const result = event.results[event.results.length - 1];
    const transcript = result[0].transcript.toLowerCase().trim();
    
    console.log(`[Voice] ${result.isFinal ? 'Final' : 'Interim'}:`, transcript);
    
    // TRAITEMENT INTERM√âDIAIRE pour r√©activit√©
    if (!result.isFinal) {
        handleInterimResult(transcript);
        return;
    }
    
    // TRAITEMENT FINAL pour validation
    handleFinalResult(transcript);
}


/**
 * Traite les r√©sultats interm√©diaires pour affichage imm√©diat
 */
function handleInterimResult(transcript) {
    const number = parseNumber(transcript);
    if (number && number === predictedNext) {
        // Pr√©diction correcte ! Affichage imm√©diat
        displayPredictedNumber(number);
        console.log('[Voice] Pr√©diction valid√©e:', number);
    }
}

/**
 * Traite les r√©sultats finaux pour validation d√©finitive
 */
function handleFinalResult(transcript) {
    // V√©rifier cache d'abord (optimisation)
    if (recognitionCache.has(transcript)) {
        const cachedNumber = recognitionCache.get(transcript);
        if (cachedNumber) {
            handleNumberDetected(cachedNumber);
            return;
        }
    }
    
    const number = parseNumber(transcript);
    if (number) {
        // Ajouter au cache pour prochaines fois
        recognitionCache.set(transcript, number);
        handleNumberDetected(number);
        return;
    }
    
    // Mots-cl√©s
    if (transcript.includes('top') || transcript.includes('hop')) {
        handleKeywordDetected();
        return;
    }
    
    // Commandes de fin
    if (transcript.includes('termin√©') || transcript.includes('fini') || 
        transcript.includes('stop') || transcript.includes('fin')) {
        console.log('[Voice] Commande de fin d√©tect√©e');
        if (typeof window.executeSet === 'function') {
            window.executeSet();
        }
        return;
    }
    
    console.log('[Voice] Transcript non reconnu:', transcript);
}

/**
 * Parse intelligent et optimis√© des nombres
 */
function parseNumber(transcript) {
    // Short-circuit pour patterns fr√©quents (90% des cas)
    if (QUICK_PATTERNS.has(transcript)) {
        return parseInt(transcript);
    }
    
    // Recherche dans la map fran√ßaise
    for (const [word, number] of FRENCH_NUMBERS) {
        if (transcript === word || 
            transcript.includes(` ${word} `) || 
            transcript.startsWith(`${word} `) || 
            transcript.endsWith(` ${word}`)) {
            return number;
        }
    }
    
    return null;
}

/**
 * Affiche imm√©diatement le nombre pr√©dit (r√©activit√©)
 */
function displayPredictedNumber(number) {
    displayedCount = number;
    pendingValidation = number;
    updateVoiceDisplayImmediate(number);
    updatePrediction(number + 1);
}

/**
 * Met √† jour la pr√©diction pour le prochain nombre
 */
function updatePrediction(nextNumber) {
    predictedNext = nextNumber;
    
    // Pr√©parer visuellement le prochain nombre (optionnel)
    const repsElement = document.getElementById('setReps');
    if (repsElement) {
        // Subtle visual hint pour le nombre suivant
        repsElement.setAttribute('data-next', nextNumber);
    }
    
    console.log('[Voice] Pr√©diction mise √† jour:', nextNumber);
}

/**
 * Affichage imm√©diat optimis√© (sans animation lourde)
 */
function updateVoiceDisplayImmediate(count) {
    const repsElement = document.getElementById('setReps');
    if (repsElement) {
        repsElement.textContent = count;
        // Animation l√©g√®re mais imm√©diate
        repsElement.style.transform = 'scale(1.05)';
        repsElement.style.color = 'var(--primary)';
        
        setTimeout(() => {
            repsElement.style.transform = '';
            repsElement.style.color = '';
        }, 150);
    }
}

/**
 * Traite la d√©tection VALID√âE d'un nombre
 * Applique la logique de monotonie croissante (pas de retour arri√®re)
 */
function handleNumberDetected(number) {
    const now = Date.now();
    
    // MONOTONIE CROISSANTE : ignorer si retour arri√®re
    if (number <= voiceData.count) {
        console.log(`[Voice] Retour arri√®re ignor√©: ${number} <= ${voiceData.count}`);
        return;
    }
    
    // LIMITE ANTI-ERREUR : plafonner les sauts √©normes
    const maxJump = voiceData.count + 8; // Max +8 reps d'un coup
    if (number > maxJump) {
        console.log(`[Voice] Saut √©norme plafonn√©: ${number} -> ${maxJump}`);
        number = maxJump;
    }
    
    // GESTION DES GAPS (logique existante am√©lior√©e)
    if (number > voiceData.count + 1) {
        for (let i = voiceData.count + 1; i < number; i++) {
            voiceData.gaps.push(i);
        }
        console.log('[Voice] Gaps d√©tect√©s:', voiceData.gaps);
    }
    
    // MISE √Ä JOUR DES DONN√âES
    const previousCount = voiceData.count;
    voiceData.count = number;
    voiceData.timestamps.push(now - voiceData.startTime);
    voiceData.lastNumber = number;
    
    // VALIDATION DE LA PR√âDICTION
    if (pendingValidation === number) {
        console.log('[Voice] Validation confirm√©e pour:', number);
        pendingValidation = null;
    } else {
        // Correction diff√©r√©e n√©cessaire
        updateVoiceDisplay(number);
    }
    
    // MISE √Ä JOUR PR√âDICTION
    updatePrediction(number + 1);
    
    // FEEDBACK
    if (navigator.vibrate) {
        navigator.vibrate(30);
    }
    
    // TIMER (si d√©j√† impl√©ment√©)
    if (typeof resetAutoValidationTimer === 'function') {
        resetAutoValidationTimer();
    }
    
    console.log(`[Voice] Count: ${previousCount} -> ${number} (gaps: ${voiceData.gaps.length})`);
}

/**
 * Traite la d√©tection d'un mot-cl√© avec logique de monotonie
 */
function handleKeywordDetected() {
    const now = Date.now();
    const newCount = voiceData.count + 1;
    
    voiceData.count = newCount;
    voiceData.timestamps.push(now - voiceData.startTime);
    
    updateVoiceDisplay(newCount);
    updatePrediction(newCount + 1);
    
    if (navigator.vibrate) {
        navigator.vibrate(30);
    }
    
    if (typeof resetAutoValidationTimer === 'function') {
        resetAutoValidationTimer();
    }
    
    console.log('[Voice] Mot-cl√© d√©tect√©, count:', newCount);
}

/**
 * Met √† jour l'affichage avec optimisations performance
 */
function updateVoiceDisplay(count) {
    // √âviter les mises √† jour inutiles
    if (displayedCount === count) return;
    
    displayedCount = count;
    
    // Mise √† jour principale (optimis√©e)
    const repsElement = document.getElementById('setReps');
    if (repsElement) {
        // Utiliser textContent direct (plus rapide que innerHTML)
        repsElement.textContent = count;
        
        // Animation plus l√©g√®re
        repsElement.classList.add('voice-updated');
        
        // Cleanup optimis√©
        setTimeout(() => {
            repsElement.classList.remove('voice-updated');
        }, 300);
    }
    
    // Indicateur micro (optimis√©)
    updateMicroIndicator(count);
    
    console.log('[Voice] Affichage mis √† jour:', count);
}

/**
 * Met √† jour l'indicateur micro de fa√ßon optimis√©e
 */
function updateMicroIndicator(count) {
    let indicator = document.querySelector('.voice-indicator');
    
    if (!indicator && count > 0) {
        // Cr√©er seulement si n√©cessaire
        const microIcon = document.querySelector('.voice-toggle-container i');
        if (microIcon) {
            indicator = document.createElement('div');
            indicator.className = 'voice-indicator';
            microIcon.parentElement.appendChild(indicator);
        }
    }
    
    if (indicator) {
        // Mise √† jour directe
        indicator.textContent = count;
        indicator.classList.add('pulse');
        
        setTimeout(() => {
            indicator.classList.remove('pulse');
        }, 300);
    }
}

/**
 * Gestionnaire d'erreurs de la reconnaissance vocale
 * G√®re les erreurs de permissions, r√©seau, etc.
 * 
 * @param {SpeechRecognitionError} error - Erreur de reconnaissance
 * @returns {void}
 */
function handleVoiceError(event) {
    console.log('[Voice] Erreur de reconnaissance:', event.error);
    
    switch(event.error) {
        case 'no-speech':
            console.log('[Voice] Aucune parole d√©tect√©e - normal');
            // Ne PAS afficher d'erreur pour no-speech
            break;
        case 'audio-capture':
            console.error('[Voice] Pas de microphone disponible');
            showToast('Microphone non disponible', 'error');
            voiceRecognitionActive = false;
            break;
        case 'not-allowed':
            console.error('[Voice] Permission microphone refus√©e');
            showToast('Permission microphone refus√©e', 'error');
            voiceRecognitionActive = false;
            break;
        default:
            console.error('[Voice] Erreur:', event.error);
    }
}

/**
 * Gestionnaire de fin de reconnaissance vocale
 * Red√©marre automatiquement si n√©cessaire
 * 
 * @returns {void}
 */
function handleVoiceEnd() {
    console.log('[Voice] Reconnaissance termin√©e');
    
    // Red√©marrer SEULEMENT si on est toujours en √©tat READY et actif
    if (voiceRecognitionActive && 
        window.workoutState && 
        window.workoutState.current === 'ready') {
        
        // D√©lai plus long pour √©viter l'effet stroboscopique
        setTimeout(() => {
            if (voiceRecognitionActive && recognition) {
                try {
                    recognition.start();
                    console.log('[Voice] Red√©marrage silencieux');
                } catch (e) {
                    // Ignorer l'erreur si d√©j√† d√©marr√©
                    if (e.name !== 'InvalidStateError') {
                        console.error('[Voice] Erreur red√©marrage:', e);
                    }
                }
            }
        }, 500); // 500ms au lieu de 100ms
    }
}

// ===== FONCTIONS UTILITAIRES =====

/**
 * Calcule le tempo moyen entre les r√©p√©titions
 * @param {number[]} timestamps - Tableau des timestamps en millisecondes
 * @returns {number|null} - Tempo moyen en millisecondes ou null si insuffisant
 */
function calculateAvgTempo(timestamps) {
    if (!timestamps || timestamps.length < 2) {
        console.log('[Voice] Pas assez de timestamps pour calculer le tempo');
        return null;
    }
    
    const intervals = [];
    for (let i = 1; i < timestamps.length; i++) {
        const interval = timestamps[i] - timestamps[i-1];
        intervals.push(interval);
    }
    
    const avgTempo = Math.round(
        intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length
    );
    
    console.log('[Voice] Tempo moyen calcul√©:', avgTempo, 'ms entre reps');
    return avgTempo;
}

/**
 * Valide les donn√©es vocales avant envoi
 * V√©rifie coh√©rence et qualit√© des donn√©es
 * 
 * @param {Object} data - Donn√©es vocales √† valider
 * @returns {boolean} true si donn√©es valides
 */
function validateVoiceData(data) {
    // TODO: V√©rifier structure obligatoire
    // TODO: Valider coh√©rence count/timestamps
    // TODO: V√©rifier plausibilit√© des gaps
    // TODO: Calculer score de confiance
    
    console.log('[Voice] Validation donn√©es (placeholder):', data);
    return false;
}

// ===== EXPORTS GLOBAUX =====

// Exposer les fonctions principales dans l'objet window
// pour utilisation depuis app.js et autres modules
window.initVoiceRecognition = initVoiceRecognition;
window.startVoiceRecognition = startVoiceRecognition;
window.stopVoiceRecognition = stopVoiceRecognition;

// Exposer variables globales pour debug et monitoring
window.voiceRecognitionActive = () => voiceRecognitionActive;
window.getVoiceData = () => voiceData;
window.calculateAvgTempo = calculateAvgTempo;
console.log('[Voice] Module voice-recognition.js charg√© - Phase 0');